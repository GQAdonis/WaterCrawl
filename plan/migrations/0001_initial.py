# Generated by Django 5.1.4 on 2025-02-09 12:41

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0006_alter_crawlresult_url'),
        ('user', '0010_user_unique_email'),
    ]

    operations = [
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('label', models.CharField(blank=True, max_length=100, null=True, verbose_name='Label')),
                ('group', models.CharField(choices=[('yearly', 'Yearly'), ('monthly', 'Monthly')], max_length=100, verbose_name='Group')),
                ('description', models.TextField(verbose_name='Description')),
                ('price_before_discount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Price before discount')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('stripe_price_id', models.CharField(verbose_name='Stripe price id')),
                ('number_of_users', models.IntegerField(default=1, help_text='Number of users that can be added to the team.', verbose_name='Number of users')),
                ('page_credit', models.IntegerField(default=1000, help_text='Number of pages that can be crawled in plan duration.', verbose_name='Page credit')),
                ('daily_page_credit', models.IntegerField(default=100, help_text='Number of pages that can be crawled per day. resets at midnight. -1 for unlimited', verbose_name='Daily page credit')),
                ('crawl_max_depth', models.IntegerField(default=3, help_text='Max depth of crawling.', verbose_name='Crawl max depth')),
                ('crawl_max_limit', models.IntegerField(default=100, help_text='Max number of pages to crawl.', verbose_name='Crawl max limit')),
                ('max_concurrent_crawl', models.IntegerField(default=1, help_text='Max Number of concurrent crawling.', verbose_name='Max concurrent crawl')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is default')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Plan',
                'verbose_name_plural': 'Plans',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='StripeWebhookHistory',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data', models.JSONField(verbose_name='Data')),
            ],
            options={
                'verbose_name': 'Stripe webhook history',
                'verbose_name_plural': 'Stripe webhook histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlanFeature',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('icon', models.CharField(blank=True, choices=[('', 'Default'), ('info', 'Info'), ('cross', 'Cross'), ('check', 'Check')], max_length=100, null=True, verbose_name='Icon')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('help_text', models.TextField(blank=True, null=True, verbose_name='Help text')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='plan.plan')),
            ],
            options={
                'verbose_name': 'Plan Feature',
                'verbose_name_plural': 'Plan Features',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_subscription_id', models.CharField(max_length=255, verbose_name='Stripe subscription id')),
                ('remain_page_credit', models.IntegerField(default=0, verbose_name='Remain page credit')),
                ('remain_daily_page_credit', models.IntegerField(default=0, verbose_name='Remain daily page credit')),
                ('start_at', models.DateTimeField(blank=True, null=True, verbose_name='Start datetime')),
                ('current_period_start_at', models.DateTimeField(blank=True, null=True, verbose_name='Current period start datetime')),
                ('current_period_end_at', models.DateTimeField(blank=True, null=True, verbose_name='Current period end datetime')),
                ('cancel_at', models.DateTimeField(blank=True, null=True, verbose_name='Canceled at')),
                ('status', models.CharField(max_length=255, verbose_name='Status')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='subscriptions', to='plan.plan', verbose_name='Plan')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='user.team', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPayment',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('stripe_payment_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe payment id')),
                ('status', models.CharField(max_length=255, verbose_name='Status')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='plan.subscription')),
            ],
            options={
                'verbose_name': 'Subscription Payment',
                'verbose_name_plural': 'Subscription Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UsageHistory',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requested_page_credit', models.PositiveIntegerField(verbose_name='Requested page credit')),
                ('used_page_credit', models.PositiveIntegerField(verbose_name='Actual page credit used')),
                ('crawl_request', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='usage_history', to='core.crawlrequest', verbose_name='Crawl request')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='usage_histories', to='user.team', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Usage History',
                'verbose_name_plural': 'Usage Histories',
                'ordering': ['-created_at'],
            },
        ),
    ]
